{%- style -%}
    .product-section {
      display: flex;
      flex-wrap: wrap;
      gap: 40px;
      align-items: center;
      margin: 40px auto;
      max-width: 1400px;
      width: 100%;
    }

    .product-image {
      flex: 1 1 400px;
    }

    .variant-selectors {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.4s ease;
    }

    .bundle-title {
      text-align: center;
      font-weight: bold;
      margin-bottom: 1rem;
    }
    .bundle-option {
      display: flex!important;
      flex-direction: column;
      justify-content: center;
      align-items: initial;
      position: relative;
      box-sizing: border-box;
      cursor: pointer;
      width: 100%;
      margin: 0 0 20px;
      padding: 15px 18px;
      background-color:#fff;
      border-radius: 23px;
      box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .3);
    }

    .bundle-option.active {
      cursor: default;
      background-color: #fff;
      box-shadow: inset 0 0 0 2px #000;
    }
    .bundle-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }
    .bundle-header > input[type='radio'] {
      display: none;
    }
    .bundle-header .custom-radio {
      display: flex;
      flex-shrink: 0;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: #fff;
      border: 3px solid #fff;
      box-sizing: border-box;
      box-shadow: 0 0 0 2px rgba(0, 0, 0, .3);
    }
    .bundle-option.active .bundle-header .custom-radio {
      background: #000;
      box-shadow: 0 0 0 2px #000;
    }
    .bundle-info {
      flex-grow: 1;
      margin-left: 1rem;
    }
    .bundle-title-row {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .bundle-subtitle {
      font-size: 0.875rem;
      color: #555;
    }
    .bundle-price {
      text-align: right;
    }
    .price {
      font-weight: bold;
      color: #000;
    }
    .compare {
      text-decoration: line-through;
      color: #999;
      font-size: 0.875rem;
    }
    .popular-wrapper {
      position:absolute;
      top: -10px;
      right: 30px;
    }
    .tag {
      font-size: 0.75rem;
      padding: 0.15rem 0.5rem;
      font-weight: bold;
    }
    .tag.popular {
      margin: 0 8px;
      padding: 6px 8px;
      border-bottom-left-radius: 5px;
      border-bottom-right-radius: 5px;
      font-family: sans-serif;
      border-radius: 0 0 4px 4px;
      font-size: 12px;
      font-weight: 700;
      line-height: 1;
      color: #fff;
      background-color: rgba(83, 129, 37, 1);
      position: relative;
  }

  .tag.popular:before,.tag.popular:after {
      display: block;
      position: absolute;
      top: 0;
      width: 0;
      height: 0;
      content: "";
      border-bottom-width: 8px;
      border-bottom-style: solid;
      filter: brightness(.7);
      border-bottom-color: #3a5a1a;
  }

  .tag.popular:before {
      left: -8px;
      border-left: 8px solid transparent
  }

  .tag.popular:after {
      right: -8px;
      border-right: 8px solid transparent
  }
    .tag.best {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 4px;
      vertical-align: top;
      padding: 4px 8px;
      word-break: break-word;
      background-color: #912929;
      color: #fff;
      font-size: 12px;
      border-radius: 23px;
    }
    .variant-selectors {
      margin-top: 1rem;
    }
    .variant-row {
      display: flex;
      align-items: center;
      gap: 4px;
    }
    .variant-row > label {
      font-weight: 500;
      color: #333;
    }
    .product-option {
      margin-bottom: 1rem;
    }

    .product-option label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: #333;
    }

    .product-option select {
      font-size: 14px;
      font-weight: 400;
      font-style: normal;
      font-family: system-ui;
      -moz-appearance: none;
      -webkit-appearance: none;
      appearance: none;
      border: none;
      padding: 7px 25px 7px 7px;
      margin: 0;
      text-overflow: ellipsis;
      white-space: nowrap;
      overflow: hidden;
      background-image: url("data:image/svg+xml;utf8,<svg width='10' height='4' viewBox='0 0 10 4' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M5 4L0.669872 0.25L9.33013 0.249999L5 4Z' fill='black'/></svg>")!important;
      background-repeat: no-repeat!important;
      background-position: right 8px center!important;
      background-color: #fff;
      background-size: initial;
      color: #000;
      outline: none;
      min-width: 225px;
      max-width: 100%;
      width: auto;
      height: auto;
      min-height: auto;
      display: flex;
      align-items: center;
      gap: 10px;
      cursor: pointer;
      box-shadow: inset 0 0 0 1px rgba(0, 0, 0, .3);
      border-radius: 23px;
    }

    .product-option select:focus , select:not(.disabled):not([disabled]):hover, select:not(.disabled):not([disabled]):focus {
      opacity: 1;
      color: #444;
      background-color: #d2d2d2;
      border-color: #ccc;
      -webkit-box-shadow: 0 0 0 .2rem #b2b2b2;
      -moz-box-shadow: 0 0 0 .2rem #b2b2b2;
      -ms-box-shadow: 0 0 0 .2rem #b2b2b2;
      -o-box-shadow: 0 0 0 .2rem #b2b2b2;
      box-shadow: 0 0 0 .2rem #b2b2b2;
    }

    .add-to-cart {
      background: #2e7d32;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      width: 100%;
      font-size: 1rem;
    }
{%- endstyle -%}

<div class="variant-selectors">
  <div class="variant-inner">
    {% for j in (1..i) %}
      <div class="variant-row" data-row="{{ j }}" data-tier="{{ i }}">
        <label>#{{ j }}</label>
        <div>
          {% for option in product.options_with_values %}
            <div class="product-option">
              <label for="option-{{ i }}-{{ j }}-{{ forloop.index0 }}">{{ option.name }}</label>
              <select
                id="option-{{ i }}-{{ j }}-{{ forloop.index0 }}"
                class="option-select"
                name="row-{{ j }}-option-{{ forloop.index0 }}"
                data-tier="{{ i }}"
                data-row="{{ j }}"
                data-option-index="{{ forloop.index0 }}"
                data-option-position="{{ forloop.index0 | plus: 1 }}"
                data-option-name="{{ option.name | escape }}"
              >
                {% for value in option.values %}
                  <option
                    value="{{ value | escape }}"
                    {% if value == option.selected_value %}
                      selected
                    {% endif %}
                  >
                    {{ value | escape }}
                  </option>
                {% endfor %}
              </select>
            </div>
          {% endfor %}
        </div>
      </div>
    {% endfor %}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // ---------- Accordion (apnar existing logic) ----------
    function updateBundleAccordion(selectedTier) {
      document.querySelectorAll('.bundle-option').forEach((option) => {
        const tier = parseInt(option.dataset.tier);
        const container = option.querySelector('.variant-selectors');

        if (tier === selectedTier) {
          option.classList.add('active');
          container.style.maxHeight = container.scrollHeight + 'px';
        } else {
          option.classList.remove('active');
          container.style.maxHeight = '0px';
        }
      });
    }

    const defaultSelected = document.querySelector('input[name="bundle_option"]:checked');
    if (defaultSelected) {
      updateBundleAccordion(parseInt(defaultSelected.value));
    }
    document.querySelectorAll('input[name="bundle_option"]').forEach((radio) => {
      radio.addEventListener('change', (e) => {
        updateBundleAccordion(parseInt(e.target.value));
      });
    });

    // ---------- Product JSON ----------
    const productDataEl = document.getElementById('product-data');
    const productData = productDataEl ? JSON.parse(productDataEl.textContent) : null;

    // Safeguard
    if (!productData) {
      console.warn('Product JSON missing; AJAX add to cart will not work.');
      return;
    }

    // ---------- Helpers ----------
    function findVariantIdByOptions(optionValues) {
      // optionValues: array ordered by option index (0..n-1)
      const variant = productData.variants.find((v) => {
        for (let i = 0; i < optionValues.length; i++) {
          const key = 'option' + (i + 1);
          if ((v[key] || '') !== optionValues[i]) return false;
        }
        return true;
      });
      if (!variant) return null;
      if (!variant.available) return 'out-of-stock';
      return variant.id;
    }

    function collectItemsFromActiveBundle() {
      const activeBundle = document.querySelector('.bundle-option.active');
      if (!activeBundle) throw new Error('Please select a bundle.');

      const tier = parseInt(activeBundle.dataset.tier);
      const items = [];

      for (let row = 1; row <= tier; row++) {
        // collect selects for this row
        const selects = activeBundle.querySelectorAll('.option-select[data-row="' + row + '"]');
        if (!selects.length) {
          throw new Error('Options missing for row #' + row);
        }

        // sort by option index to keep order option1, option2, option3
        const values = Array.from(selects)
          .sort((a, b) => parseInt(a.dataset.optionIndex) - parseInt(b.dataset.optionIndex))
          .map((s) => s.value);

        const variantId = findVariantIdByOptions(values);

        if (variantId === 'out-of-stock') {
          throw new Error('Selected variant for row #' + row + ' is out of stock.');
        }
        if (!variantId) {
          throw new Error('No matching variant found for row #' + row + '. Please adjust options.');
        }

        items.push({
          id: variantId,
          quantity: 1,
          properties: {
            Bundle: tier + ' Pair Bundle',
            Row: '#' + row,
          },
        });
      }

      return items;
    }

    function toast(msg) {
      // Replace with your theme's toast/snackbar if available
      alert(msg);
    }

    async function updateCartCount() {
      try {
        const cart = await fetch('/cart.js').then((r) => r.json());
        const countEl = document.querySelector('#cart-count');
        if (countEl) countEl.textContent = cart.item_count;
      } catch (e) {
        console.warn('Cart count update failed', e);
      }
    }

    // ---------- Add to cart handler ----------
    const addBtn = document.querySelector('.add-to-cart');
    if (addBtn) {
      addBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        const btn = e.currentTarget;
        btn.disabled = true;
        const oldText = btn.textContent;
        btn.textContent = 'Adding...';

        try {
          const items = collectItemsFromActiveBundle();

          const res = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Accept: 'application/json',
            },
            body: JSON.stringify({ items }),
          });

          if (!res.ok) {
            const err = await res.json().catch(() => ({}));
            throw new Error(err?.description || 'Failed to add to cart.');
          }

          await updateCartCount();
          toast('Bundle added to cart 🎉');
        } catch (err) {
          console.error(err);
          toast(err.message || 'Something went wrong. Please try again.');
        } finally {
          btn.disabled = false;
          btn.textContent = oldText;
        }
      });
    }
  });
</script>
