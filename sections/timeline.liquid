{% comment %}
  Section: Timeline slider (content under the active box)
  Behavior: Active marker/box select korle oi box-er niche content card show hobe
{% endcomment %}

<section id="timeline-{{ section.id }}" class="timeline-section">
  <style>
    /* ---- Tokens ---- */
    #timeline-{{ section.id }}{
      --ts-accent: {{ section.settings.accent | default: '#a7754e' }};
      --ts-accent-ghost: color-mix(in srgb, var(--ts-accent) 18%, #fff);
      --ts-ink: #222;
      --ts-ink-dim: #666;
      --ts-rail: #d8d8d8;
      --ts-border: #eaeaea;
      --ts-bg: #fff;

      --ts-col: {{ section.settings.col_width | default: 160 }}px; /* each marker column width */
      --ts-gap: {{ section.settings.gap | default: 120 }}px;      /* gap between markers */
      --ts-card-w: clamp(280px, 44vw, 520px);                      /* content card width */
      --ts-space-below: 260px; /* bottom space under rail so card has room */
      --ts-radius: 12px;
    }

    /* ---- Layout ---- */
    #timeline-{{ section.id }} .ts-inner{
      max-width: 1200px;
      margin: 0 auto;
      padding: 32px 20px 60px;
      color: var(--ts-ink);
      background: var(--ts-bg);
    }

    #timeline-{{ section.id }} .ts-heading{
      font-size: clamp(24px, 2.4vw, 40px);
      line-height: 1.15;
      margin: 0 0 28px 0;
      font-weight: 650;
      letter-spacing: -0.01em;
    }

    /* ---- Rail + scroller ---- */
    #timeline-{{ section.id }} .ts-rail-wrap{
      position: relative;
      padding-bottom: var(--ts-space-below);
    }

    #timeline-{{ section.id }} .ts-scroller{
      position: relative;
      display: flex;
      gap: var(--ts-gap);
      overflow-x: auto;
      overflow-y: visible; /* allow dropdown content to overflow */
      scroll-behavior: smooth;
      scrollbar-width: thin;
      height: 300px;
      padding: 56px 16px 10px;
      border-top: 2px solid var(--ts-rail);
    }
    #timeline-{{ section.id }} .ts-scroller::-webkit-scrollbar{height:8px}
    #timeline-{{ section.id }} .ts-scroller::-webkit-scrollbar-thumb{background:#cfcfcf;border-radius:999px}

    #timeline-{{ section.id }} .ts-item{
      position: relative;
      flex: 0 0 var(--ts-col);
      min-width: var(--ts-col);
      align-self: flex-start;
    }

    #timeline-{{ section.id }} .ts-tab{
      position: relative;
      background: transparent;
      border: 0;
      padding: 28px 0 0 0;
      text-align: left;
      color: var(--ts-ink);
      cursor: pointer;
      font: inherit;
      outline-offset: 4px;
    }

    /* dot on the rail */
    #timeline-{{ section.id }} .ts-dot{
      position: absolute;
      top: -1px;
      transform: translateY(-50%);
      width: 10px; height: 10px; border-radius: 50%;
      background: var(--ts-accent);
      box-shadow: 0 0 0 4px var(--ts-bg);
    }

    #timeline-{{ section.id }} .ts-label{
      display: inline-block;
      margin-top: 12px;
      font-weight: 600;
      white-space: nowrap;
    }

    /* active marker */
    #timeline-{{ section.id }} .ts-tab[aria-selected="true"] .ts-dot{
      width: 14px; height: 14px; margin-left: -2px;
      background: var(--ts-accent);
      box-shadow: 0 0 0 6px var(--ts-accent-ghost);
    }
    #timeline-{{ section.id }} .ts-tab[aria-selected="true"] .ts-label{ color: var(--ts-accent); }

    /* ---- The dropdown content card (under active marker) ---- */
    #timeline-{{ section.id }} .ts-content{
      position: absolute;
      top: 48px;           /* below the rail */
      left: -8px;          /* slight left from marker */
      width: var(--ts-card-w);
      max-width: 90vw;
      background: #fff;
      border: 1px solid var(--ts-border);
      border-radius: var(--ts-radius);
      box-shadow: 0 10px 24px rgba(0,0,0,.06);
      padding: 16px 16px 18px;
      visibility: hidden;
      opacity: 0;
      transform: translateY(8px);
      transition: opacity .18s ease, transform .18s ease, visibility .18s;
      pointer-events: none;
      z-index: 2;
    }
    #timeline-{{ section.id }} .ts-item.is-active .ts-content{
      visibility: visible; opacity: 1; transform: translateY(0);
      pointer-events: auto;
    }

    /* small arrow pointer */
    #timeline-{{ section.id }} .ts-content:before{
      content: "";
      position: absolute;
      top: -8px; left: 18px;
      width: 14px; height: 14px;
      background: #fff;
      border-left: 1px solid var(--ts-border);
      border-top: 1px solid var(--ts-border);
      transform: rotate(45deg);
    }

    #timeline-{{ section.id }} .ts-eyebrow{
      display: flex; align-items: center; gap: 10px; font-weight: 600; color: var(--ts-accent);
    }
    #timeline-{{ section.id }} .ts-eyebrow .dot{
      width: 10px; height: 10px; border-radius: 50%; background: var(--ts-accent);
      box-shadow: 0 0 0 4px var(--ts-accent-ghost);
    }
    #timeline-{{ section.id }} .ts-title{
      font-size: clamp(18px, 1.6vw, 22px);
      line-height: 1.25; margin: 8px 0 6px; font-weight: 650;
    }
    #timeline-{{ section.id }} .ts-desc{ color: var(--ts-ink-dim); line-height: 1.6; }

    #timeline-{{ section.id }} .ts-media{ display: flex; gap: 14px; align-items: flex-start; }
    #timeline-{{ section.id }} .ts-media img{
      width: 70px; height: 70px; object-fit: cover; border-radius: 8px; background: #f6f6f6;
    }

    /* ---- Nav arrows ---- */
    #timeline-{{ section.id }} .ts-nav{
      margin-top: 16px; display: flex; gap: 12px; justify-content: center;
    }
    #timeline-{{ section.id }} .ts-btn{
      width: 44px; height: 44px; border-radius: 50%;
      border: 1px solid var(--ts-accent); color: var(--ts-accent);
      background: #fff; display: inline-grid; place-items: center; cursor: pointer;
      transition: background .2s, color .2s;
    }
    #timeline-{{ section.id }} .ts-btn:hover{ background: var(--ts-accent); color:#fff; }
    #timeline-{{ section.id }} .ts-btn:disabled{
      opacity:.35; cursor:not-allowed; background:#fafafa; color:#999; border-color:#ddd;
    }

    @media (max-width: 640px){
      #timeline-{{ section.id }}{ --ts-col: 140px; --ts-gap: 80px; }
      #timeline-{{ section.id }} .ts-content{ left: -6px; }
    }
    @media (prefers-reduced-motion: reduce){
      #timeline-{{ section.id }} .ts-scroller{ scroll-behavior: auto; }
      #timeline-{{ section.id }} .ts-content{ transition: none; }
    }
  </style>

  <div class="ts-inner">
    {% if section.settings.heading != blank %}
      <h2 class="ts-heading">{{ section.settings.heading }}</h2>
    {% endif %}

    <div class="ts-rail-wrap">
      <div class="ts-scroller" role="tablist" aria-label="Timeline steps">
        {% for block in section.blocks %}
          {% assign i = forloop.index0 %}
          {% assign tab_id = 'tab-' | append: section.id | append: '-' | append: i %}
          {% assign panel_id = 'panel-' | append: section.id | append: '-' | append: i %}
          <div class="ts-item {% if forloop.first %}is-active{% endif %}" {{ block.shopify_attributes }}>
            <button
              id="{{ tab_id }}"
              class="ts-tab"
              role="tab"
              aria-controls="{{ panel_id }}"
              aria-selected="{% if forloop.first %}true{% else %}false{% endif %}"
              data-index="{{ i }}"
              type="button"
            >
              <span class="ts-dot" aria-hidden="true"></span>
              <span class="ts-label">{{ block.settings.label | default: 'Week ' | append: forloop.index }}</span>
            </button>

            <div id="{{ panel_id }}" class="ts-content" role="tabpanel" aria-labelledby="{{ tab_id }}">
              <div class="ts-media">
                {% if block.settings.image != blank %}
                  <img
                    src="{{ block.settings.image | image_url: width: 180 }}"
                    alt="{{ block.settings.image.alt | escape }}"
                    loading="lazy"
                    width="70"
                    height="70"
                  >
                {% endif %}
                <div>
                  <div class="ts-eyebrow">
                    <span class="dot" aria-hidden="true"></span>
                    <span>{{ block.settings.label | default: 'Week ' | append: forloop.index }}</span>
                  </div>
                  {% if block.settings.title != blank %}
                    <div class="ts-title">{{ block.settings.title }}</div>
                  {% endif %}
                  {% if block.settings.text != blank %}
                    <div class="ts-desc">{{ block.settings.text }}</div>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        {% endfor %}
      </div>

      {% if section.settings.show_nav %}
        <div class="ts-nav">
          <button class="ts-btn ts-prev" aria-label="Previous">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
            </svg>
          </button>
          <button class="ts-btn ts-next" aria-label="Next">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M8.59 16.59 10 18l6-6-6-6-1.41 1.41L13.17 12z"/>
            </svg>
          </button>
        </div>
      {% endif %}
    </div>
  </div>

  <script>
    (() => {
      const $section = document.getElementById('timeline-{{ section.id }}');
      if (!$section) return;

      const $scroller = $section.querySelector('.ts-scroller');
      const $items = Array.from($section.querySelectorAll('.ts-item'));
      const $tabs = Array.from($section.querySelectorAll('.ts-tab'));
      const $prev = $section.querySelector('.ts-prev');
      const $next = $section.querySelector('.ts-next');

      let current = 0;

      function clamp(n, min, max) {
        return Math.max(min, Math.min(max, n));
      }

      function setActive(index, opts = { scroll: true, focus: false }) {
        index = clamp(index, 0, $items.length - 1);
        if (current === index) {
          if (opts.scroll) centerItem(index);
          updateNav();
          return;
        }
        $items[current]?.classList.remove('is-active');
        $tabs[current]?.setAttribute('aria-selected', 'false');
        current = index;
        $items[current]?.classList.add('is-active');
        $tabs[current]?.setAttribute('aria-selected', 'true');
        if (opts.scroll) centerItem(index);
        if (opts.focus) $tabs[current]?.focus({ preventScroll: true });
        updateNav();
        updateHandlePosition();
      }

      function centerItem(index) {
        const tab = $tabs[index];
        if (!tab) return;
        const box = tab.getBoundingClientRect();
        const parent = $scroller.getBoundingClientRect();
        const delta = box.left + box.width / 2 - (parent.left + parent.width / 2);
        $scroller.scrollBy({ left: delta, behavior: 'smooth' });
      }

      function updateNav() {
        if ($prev) $prev.disabled = current <= 0;
        if ($next) $next.disabled = current >= $items.length - 1;
      }

      // ---------------- draggable handle ----------------
      const $railWrap = $section.querySelector('.ts-rail-wrap');
      const $handle = document.createElement('div');
      $handle.style.cssText = `
      position: absolute;
      top: -6px;
      width: 16px; height: 16px;
      background: var(--ts-accent);
      border-radius: 50%;
      cursor: grab;
      z-index: 3;
      transform: translateX(0);
    `;
      $railWrap.appendChild($handle);

      let isDragging = false;

      function updateHandlePosition() {
        const tab = $tabs[current];
        if (!tab) return;
        const railRect = $railWrap.getBoundingClientRect();
        const tabRect = tab.getBoundingClientRect();
        const left = tabRect.left + tabRect.width / 2 - railRect.left;
        $handle.style.transform = `translateX(${left - $handle.offsetWidth / 2}px)`;
      }

      $handle.addEventListener('mousedown', (e) => {
        isDragging = true;
        $handle.style.cursor = 'grabbing';
        e.preventDefault();
      });
      document.addEventListener('mouseup', () => {
        isDragging = false;
        $handle.style.cursor = 'grab';
      });
      document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        const railRect = $railWrap.getBoundingClientRect();
        let x = e.clientX - railRect.left;
        x = clamp(x, 0, railRect.width);
        $handle.style.transform = `translateX(${x - $handle.offsetWidth / 2}px)`;

        // nearest tab
        let nearestIndex = 0;
        let nearestDist = Infinity;
        $tabs.forEach((tab, i) => {
          const tabRect = tab.getBoundingClientRect();
          const tabCenter = tabRect.left + tabRect.width / 2 - railRect.left;
          const dist = Math.abs(tabCenter - x);
          if (dist < nearestDist) {
            nearestDist = dist;
            nearestIndex = i;
          }
        });
        setActive(nearestIndex, { scroll: false, focus: false });
      });

      // ---------------- events ----------------
      $tabs.forEach((tab, i) => {
        tab.addEventListener('click', () => setActive(i, { scroll: true, focus: false }));
        tab.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowRight') {
            setActive(i + 1, { scroll: true, focus: true });
            e.preventDefault();
          }
          if (e.key === 'ArrowLeft') {
            setActive(i - 1, { scroll: true, focus: true });
            e.preventDefault();
          }
          if (e.key === 'Home') {
            setActive(0, { scroll: true, focus: true });
            e.preventDefault();
          }
          if (e.key === 'End') {
            setActive($items.length - 1, { scroll: true, focus: true });
            e.preventDefault();
          }
        });
      });

      $prev?.addEventListener('click', () => setActive(current - 1, { scroll: true, focus: true }));
      $next?.addEventListener('click', () => setActive(current + 1, { scroll: true, focus: true }));

      // init
      setActive(0, { scroll: false, focus: false });
      updateNav();

      // Editor support
      document.addEventListener('shopify:block:select', (e) => {
        const idx = Number(e.target?.querySelector('.ts-tab')?.dataset?.index);
        if (!Number.isNaN(idx)) setActive(idx, { scroll: true, focus: true });
      });

      window.addEventListener('resize', updateHandlePosition);
    })();
  </script>
</section>

{% schema %}
{
  "name": "Timeline slider",
  "tag": "section",
  "class": "timeline-under-slider",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "The power to transform in weeks" },
    { "type": "color", "id": "accent", "label": "Accent color", "default": "#a7754e" },
    {
      "type": "range",
      "id": "gap",
      "label": "Gap between markers",
      "min": 60,
      "max": 240,
      "step": 4,
      "unit": "px",
      "default": 120
    },
    {
      "type": "range",
      "id": "col_width",
      "label": "Marker column width",
      "min": 120,
      "max": 240,
      "step": 5,
      "unit": "px",
      "default": 160
    },
    { "type": "checkbox", "id": "show_nav", "label": "Show arrow navigation", "default": true }
  ],
  "blocks": [
    {
      "type": "step",
      "name": "Step",
      "settings": [
        { "type": "text", "id": "label", "label": "Label (e.g. Week 1)", "default": "Week 1" },
        { "type": "text", "id": "title", "label": "Title", "default": "The journey begins" },
        {
          "type": "textarea",
          "id": "text",
          "label": "Description",
          "default": "Bioavailable, patented ingredients enter your bloodstream and start to deliver measurable results."
        },
        { "type": "image_picker", "id": "image", "label": "Image" }
      ]
    }
  ],
  "presets": [
    {
      "name": "Timeline slider (under active card)",
      "category": "Custom",
      "blocks": [
        { "type": "step", "settings": { "label": "Week 1", "title": "The journey begins" } },
        { "type": "step", "settings": { "label": "Week 2", "title": "Momentum builds" } },
        { "type": "step", "settings": { "label": "Week 3", "title": "Noticeable changes" } },
        { "type": "step", "settings": { "label": "Week 4", "title": "Compounding benefits" } },
        { "type": "step", "settings": { "label": "Beyond", "title": "Long-term transformation" } }
      ]
    }
  ]
}
{% endschema %}
