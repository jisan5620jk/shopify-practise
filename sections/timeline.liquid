{% schema %}
{
  "name": "Timeline Slider",
  "settings": [],
  "blocks": [
    {
      "type": "slide",
      "name": "Slide",
      "settings": [
        { "id": "image", "type": "image_picker", "label": "Image" },
        { "id": "title", "type": "text", "label": "Title", "default": "Week 1" },
        { "id": "subtitle", "type": "text", "label": "Subtitle", "default": "The journey begins" },
        { "id": "description", "type": "textarea", "label": "Description", "default": "Description goes here." }
      ]
    }
  ],
  "max_blocks": 10,
  "presets": [{ "name": "Timeline Slider", "category": "Custom" }]
}
{% endschema %}

<section id="timeline-slider" class="timeline-slider-section">
  <div class="ts-container">
    <!-- Left: big card -->
    <div class="ts-card" aria-live="polite">
      <div class="ts-image-wrap">
        <img id="ts-image" src="{{ block | default: '' }}" alt="">
      </div>
      <div class="ts-content">
        <h3 id="ts-title"></h3>
        <p class="ts-sub" id="ts-subtitle"></p>
        <p class="ts-desc" id="ts-desc"></p>
      </div>
    </div>

    <!-- Right: timeline / dots -->
    <div class="ts-timeline-wrap">
      <div class="ts-line" aria-hidden="true"></div>
      <ul class="ts-timeline" id="ts-timeline" role="tablist">
        <!-- dots generated by JS -->
      </ul>
      <div class="ts-controls">
        <button id="ts-prev" class="ts-btn" aria-label="Previous">&larr;</button>
        <button id="ts-next" class="ts-btn" aria-label="Next">&rarr;</button>
      </div>
    </div>
  </div>

  <style>
    /* Container */
    .timeline-slider-section { padding: 40px 20px; font-family: Arial, Helvetica, sans-serif; }
    .ts-container { display: flex; gap: 30px; align-items: flex-start; max-width: 1100px; margin: 0 auto; }

    /* Card (left) */
    .ts-card { flex: 0 0 420px; border: 1px solid #e6e6e6; padding: 24px; box-shadow: 0 2px 6px rgba(0,0,0,0.03); border-radius: 4px; background:#fff; }
    .ts-image-wrap { width: 64px; height: 64px; margin-bottom: 16px; }
    .ts-image-wrap img { width: 100%; height: 100%; object-fit: cover; border-radius: 8px; display:block; }
    .ts-content h3 { margin: 0 0 8px; font-size: 18px; color: #111; }
    .ts-sub { margin:0 0 10px; color:#7a5a3a; font-weight:600; }
    .ts-desc { margin:0; color:#444; font-size:14px; line-height:1.4; }

    /* Timeline (right) */
    .ts-timeline-wrap { flex: 1; position: relative; padding: 20px 30px; }
    .ts-line { position: absolute; top: 36px; left: 10px; right: 10px; height: 2px; background: #ddd; z-index: 0; }
    .ts-timeline { list-style: none; padding: 0; margin: 0; display: flex; gap: 40px; align-items: center; position: relative; z-index: 1; justify-content: flex-start; }
    .ts-timeline li { text-align: center; min-width: 80px; }
    .ts-dot { width: 14px; height: 14px; border-radius: 50%; background: #b97b49; display: inline-block; margin-bottom: 8px; border: 3px solid #fff; box-shadow: 0 1px 3px rgba(0,0,0,0.12); cursor: pointer; transition: transform .18s ease, box-shadow .18s ease; }
    .ts-dot.inactive { background: #cfcfcf; }
    .ts-dot.active { transform: scale(1.18); box-shadow: 0 6px 14px rgba(0,0,0,0.15); }
    .ts-timeline .ts-label { font-size: 13px; color: #333; margin-top: 6px; }
    .ts-controls { margin-top: 26px; display:flex; gap: 10px; }
    .ts-btn { border: 1px solid #e0e0e0; background: #fff; padding: 8px 12px; cursor:pointer; border-radius: 20px; }
    .ts-btn:focus { outline: 2px solid #b97b49; outline-offset: 2px; }

    /* Small screens */
    @media (max-width: 880px) {
      .ts-container { flex-direction: column; }
      .ts-card { flex: none; width: 100%; }
      .ts-timeline-wrap { width: 100%; padding-top: 12px; }
      .ts-timeline { gap: 18px; overflow-x: auto; padding-bottom: 8px; }
    }
  </style>

  <script>
    (function() {
      // Read blocks from this section generated by Liquid
      var slides = [];
      {% for block in section.blocks %}
        slides.push({
          image: {{ block.settings.image | json }},
          title: {{ block.settings.title | json }},
          subtitle: {{ block.settings.subtitle | json }},
          description: {{ block.settings.description | json }}
        });
      {% endfor %}

      if (!slides.length) {
        // fallback demo slides if none were added in theme editor
        slides = [
          { image: '', title: 'Week 1', subtitle: 'The journey begins', description: "LYMA's bioavailable, patented ingredients enter your bloodstream and start to deliver measurable results." },
          { image: '', title: 'Week 2', subtitle: '', description: 'Week 2 description.' },
          { image: '', title: 'Week 3', subtitle: '', description: 'Week 3 description.' },
          { image: '', title: 'Week 4', subtitle: '', description: 'Week 4 description.' },
          { image: '', title: 'Beyond', subtitle: '', description: 'Beyond: Continued maintenance and results.' }
        ];
      }

      var current = 0;
      var imgEl = document.getElementById('ts-image');
      var titleEl = document.getElementById('ts-title');
      var subEl = document.getElementById('ts-subtitle');
      var descEl = document.getElementById('ts-desc');
      var timeline = document.getElementById('ts-timeline');
      var prevBtn = document.getElementById('ts-prev');
      var nextBtn = document.getElementById('ts-next');

      // Build timeline dots
      slides.forEach(function(s, idx) {
        var li = document.createElement('li');
        li.setAttribute('role','presentation');

        var dot = document.createElement('button');
        dot.className = 'ts-dot';
        dot.setAttribute('role', 'tab');
        dot.setAttribute('aria-selected', 'false');
        dot.setAttribute('aria-controls', 'slide-' + idx);
        dot.setAttribute('data-index', idx);
        dot.title = s.title || ('Slide ' + (idx+1));

        var label = document.createElement('div');
        label.className = 'ts-label';
        label.textContent = s.title || ('Slide ' + (idx+1));

        dot.addEventListener('click', function(e) {
          goTo(parseInt(this.getAttribute('data-index')));
        });

        li.appendChild(dot);
        li.appendChild(label);
        timeline.appendChild(li);
      });

      function render() {
        var s = slides[current];
        if (s.image) {
          imgEl.src = s.image;
          imgEl.style.display = 'block';
        } else {
          // placeholder image (SVG data URI)
          imgEl.src = 'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64"><rect rx="8" width="100%" height="100%" fill="%23f6f6f6"/><text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="%23c2c2c2" font-size="10">Image</text></svg>';
        }
        titleEl.textContent = s.title || '';
        subEl.textContent = s.subtitle || '';
        descEl.textContent = s.description || '';

        // update dots active
        var dots = timeline.querySelectorAll('.ts-dot');
        dots.forEach(function(d, i) {
          if (i === current) {
            d.classList.add('active');
            d.classList.remove('inactive');
            d.setAttribute('aria-selected','true');
            d.setAttribute('tabindex','0');
          } else {
            d.classList.remove('active');
            d.classList.add('inactive');
            d.setAttribute('aria-selected','false');
            d.setAttribute('tabindex','-1');
          }
        });

        // ensure active dot visible on overflow
        var active = timeline.querySelector('.ts-dot.active');
        if(active && active.scrollIntoView) {
          active.scrollIntoView({ block: 'nearest', inline: 'center', behavior: 'smooth' });
        }
      }

      function goTo(idx) {
        if (idx < 0) idx = 0;
        if (idx > slides.length - 1) idx = slides.length - 1;
        current = idx;
        render();
      }

      prevBtn.addEventListener('click', function() {
        goTo(current - 1);
      });
      nextBtn.addEventListener('click', function() {
        goTo(current + 1);
      });

      // keyboard navigation (left/right)
      document.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowLeft') goTo(current - 1);
        if (e.key === 'ArrowRight') goTo(current + 1);
      });

      // init
      render();
    })();
  </script>
</section>
