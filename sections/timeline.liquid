{% comment %}
  Section: Timeline slider (all-in-one)
  Drop this file into Sections as timeline-slider.liquid and add it via Theme Editor.
{% endcomment %}

<section id="timeline-{{ section.id }}" class="timeline-section">
  <style>
    /* ---- Configurable base tokens ---- */
    #timeline-{{ section.id }} {
      --ts-accent: #a7754e;      /* dot & active colors */
      --ts-accent-ghost: #e8d8cc;
      --ts-ink: #222;
      --ts-ink-dim: #666;
      --ts-rail: #d8d8d8;
      --ts-border: #eee;
      --ts-bg: #fff;
      --ts-gap: {{ section.settings.gap | default: 120 }}px; /* marker gap */
      --ts-maxw: 1200px;
    }

    /* ---- Layout ---- */
    #timeline-{{ section.id }} .ts-inner {
      max-width: var(--ts-maxw);
      margin: 0 auto;
      padding: 32px 20px 60px;
      color: var(--ts-ink);
      background: var(--ts-bg);
    }

    #timeline-{{ section.id }} .ts-heading {
      font-size: clamp(24px, 2.4vw, 40px);
      line-height: 1.15;
      margin: 0 0 28px 0;
      font-weight: 650;
      letter-spacing: -0.01em;
    }

    /* ---- Timeline rail + markers ---- */
    #timeline-{{ section.id }} .ts-rail-wrap {
      position: relative;
      overflow: hidden; /* keeps the rail tidy on small screens */
    }

    #timeline-{{ section.id }} .ts-scroller {
      position: relative;
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: max-content;
      gap: var(--ts-gap);
      overflow-x: auto;
      overflow-y: visible;
      scroll-behavior: smooth;
      scrollbar-width: thin;
      padding: 56px 16px 24px;
      /* the rail (line) */
      border-top: 2px solid var(--ts-rail);
    }
    #timeline-{{ section.id }} .ts-scroller::-webkit-scrollbar { height: 8px; }
    #timeline-{{ section.id }} .ts-scroller::-webkit-scrollbar-thumb { background: #ccc; border-radius: 999px; }

    #timeline-{{ section.id }} .ts-item {
      position: relative;
      min-width: 140px;
      scroll-snap-align: start; /* nice on mobile if user swipes */
    }

    #timeline-{{ section.id }} .ts-tab {
      position: relative;
      background: transparent;
      border: 0;
      padding: 28px 0 0 0; /* space for label under the rail */
      cursor: pointer;
      color: var(--ts-ink);
      font: inherit;
      text-align: left;
      outline-offset: 4px;
    }

    /* Dot */
    #timeline-{{ section.id }} .ts-dot {
      position: absolute;
      top: -1px; /* sits on the rail (border-top) */
      transform: translateY(-50%);
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: var(--ts-accent);
      box-shadow: 0 0 0 4px var(--ts-bg);
    }
    #timeline-{{ section.id }} .ts-tab:hover .ts-dot { filter: brightness(0.95); }

    #timeline-{{ section.id }} .ts-label {
      display: inline-block;
      margin-top: 10px;
      font-weight: 600;
      color: var(--ts-ink);
      white-space: nowrap;
    }

    /* Active state */
    #timeline-{{ section.id }} .ts-tab[aria-selected="true"] .ts-dot {
      width: 14px; height: 14px;
      margin-left: -2px; /* re-center after size change */
      background: var(--ts-accent);
      box-shadow: 0 0 0 6px var(--ts-accent-ghost);
    }
    #timeline-{{ section.id }} .ts-tab[aria-selected="true"] .ts-label {
      color: var(--ts-accent);
    }

    /* ---- Content panel ---- */
    #timeline-{{ section.id }} .ts-panels {
      margin-top: 28px;
      border-top: 1px solid var(--ts-border);
      padding-top: 24px;
      display: grid;
      grid-template-columns: 1fr;
      gap: 12px;
    }

    @media (min-width: 960px) {
      #timeline-{{ section.id }} .ts-panels {
        grid-template-columns: minmax(320px, 0.9fr) 1.1fr;
        align-items: start;
        gap: 36px;
      }
    }

    #timeline-{{ section.id }} .ts-media {
      display: flex;
      align-items: flex-start;
      gap: 16px;
    }
    #timeline-{{ section.id }} .ts-media img {
      width: 84px; height: 84px; object-fit: cover; border-radius: 8px;
      background: #f6f6f6;
    }

    #timeline-{{ section.id }} .ts-eyebrow {
      display: flex; align-items: center; gap: 10px;
      font-weight: 600; color: var(--ts-accent);
    }
    #timeline-{{ section.id }} .ts-eyebrow .dot {
      width: 10px; height: 10px; border-radius: 50%; background: var(--ts-accent);
      box-shadow: 0 0 0 4px var(--ts-accent-ghost);
    }

    #timeline-{{ section.id }} .ts-title {
      font-size: clamp(18px, 1.5vw, 22px);
      line-height: 1.25;
      margin: 8px 0 8px;
      font-weight: 650;
    }
    #timeline-{{ section.id }} .ts-desc {
      color: var(--ts-ink-dim);
      line-height: 1.6;
    }

    /* show only active panel */
    #timeline-{{ section.id }} .ts-panel { display: none; }
    #timeline-{{ section.id }} .ts-panel.is-active { display: contents; } /* keeps grid layout intact */

    /* ---- Nav arrows ---- */
    #timeline-{{ section.id }} .ts-nav {
      margin-top: 18px;
      display: flex; gap: 12px; justify-content: center;
    }
    #timeline-{{ section.id }} .ts-btn {
      width: 44px; height: 44px; border-radius: 50%;
      border: 1px solid var(--ts-accent);
      color: var(--ts-accent);
      background: #fff;
      display: inline-grid; place-items: center;
      cursor: pointer;
      transition: background .2s, color .2s;
    }
    #timeline-{{ section.id }} .ts-btn:hover { background: var(--ts-accent); color: #fff; }
    #timeline-{{ section.id }} .ts-btn:disabled {
      opacity: .35; cursor: not-allowed; background: #fafafa; color: #999; border-color: #ddd;
    }

    /* Reduce motion */
    @media (prefers-reduced-motion: reduce) {
      #timeline-{{ section.id }} .ts-scroller { scroll-behavior: auto; }
    }
  </style>

  <div class="ts-inner">
    {% if section.settings.heading != blank %}
      <h2 class="ts-heading">{{ section.settings.heading }}</h2>
    {% endif %}

    <!-- Rail + markers -->
    <div class="ts-rail-wrap">
      <div class="ts-scroller" role="tablist" aria-label="Timeline steps">
        {% for block in section.blocks %}
          {% assign i = forloop.index0 %}
          {% assign tab_id = 'tab-' | append: section.id | append: '-' | append: i %}
          {% assign panel_id = 'panel-' | append: section.id | append: '-' | append: i %}

          <div class="ts-item" {{ block.shopify_attributes }}>
            <button
              id="{{ tab_id }}"
              class="ts-tab"
              role="tab"
              aria-controls="{{ panel_id }}"
              aria-selected="{{ forloop.first | default: false }}"
              data-index="{{ i }}"
              type="button"
            >
              <span class="ts-dot" aria-hidden="true"></span>
              <span class="ts-label">{{ block.settings.label | default: 'Week ' | append: forloop.index }}</span>
            </button>
          </div>
        {% endfor %}
      </div>

      {% if section.settings.show_nav %}
        <div class="ts-nav">
          <button class="ts-btn ts-prev" aria-label="Previous">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
            </svg>
          </button>
          <button class="ts-btn ts-next" aria-label="Next">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M8.59 16.59 10 18l6-6-6-6-1.41 1.41L13.17 12z"/>
            </svg>
          </button>
        </div>
      {% endif %}
    </div>

    <!-- Panels -->
    <div class="ts-panels">
      {% for block in section.blocks %}
        {% assign i = forloop.index0 %}
        {% assign tab_id = 'tab-' | append: section.id | append: '-' | append: i %}
        {% assign panel_id = 'panel-' | append: section.id | append: '-' | append: i %}

        <div
          id="{{ panel_id }}"
          class="ts-panel {% if forloop.first %}is-active{% endif %}"
          role="tabpanel"
          aria-labelledby="{{ tab_id }}"
          aria-hidden="{{ forloop.first | default: false | negate }}"
          data-index="{{ i }}"
        >
          <div class="ts-media">
            {% if block.settings.image != blank %}
              <img
                src="{{ block.settings.image | image_url: width: 180 }}"
                alt="{{ block.settings.image.alt | escape }}"
                width="84"
                height="84"
                loading="lazy"
              >
            {% endif %}

            <div>
              <div class="ts-eyebrow">
                <span class="dot" aria-hidden="true"></span>
                <span>{{ block.settings.label | default: 'Week ' | append: forloop.index }}</span>
              </div>

              {% if block.settings.title != blank %}
                <div class="ts-title">{{ block.settings.title }}</div>
              {% endif %}

              {% if block.settings.text != blank %}
                <div class="ts-desc">{{ block.settings.text }}</div>
              {% endif %}
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>

  <script>
    (() => {
      const $section = document.getElementById('timeline-{{ section.id }}');
      if (!$section) return;

      const $scroller = $section.querySelector('.ts-scroller');
      const $tabs = Array.from($section.querySelectorAll('.ts-tab'));
      const $panels = Array.from($section.querySelectorAll('.ts-panel'));
      const $prev = $section.querySelector('.ts-prev');
      const $next = $section.querySelector('.ts-next');

      let current = 0;

      function clamp(n, min, max) {
        return Math.max(min, Math.min(max, n));
      }

      function setActive(index, opts = { scroll: true, focusTab: false }) {
        index = clamp(index, 0, $tabs.length - 1);
        if (current === index) {
          if (opts.scroll) centerTab(index);
          updateNav();
          return;
        }

        // previous
        $tabs[current]?.setAttribute('aria-selected', 'false');
        $panels[current]?.classList.remove('is-active');
        $panels[current]?.setAttribute('aria-hidden', 'true');

        // next
        current = index;
        $tabs[current]?.setAttribute('aria-selected', 'true');
        $panels[current]?.classList.add('is-active');
        $panels[current]?.setAttribute('aria-hidden', 'false');

        if (opts.scroll) centerTab(index);
        if (opts.focusTab) $tabs[current]?.focus({ preventScroll: true });

        updateNav();
      }

      function centerTab(index) {
        const el = $tabs[index];
        if (!el) return;
        // center the selected tab in the scroller viewport
        const box = el.getBoundingClientRect();
        const parent = $scroller.getBoundingClientRect();
        const delta = box.left + box.width / 2 - (parent.left + parent.width / 2);
        $scroller.scrollBy({ left: delta, behavior: 'smooth' });
      }

      function updateNav() {
        if ($prev) $prev.disabled = current <= 0;
        if ($next) $next.disabled = current >= $tabs.length - 1;
      }

      // Event wiring
      $tabs.forEach((tab, i) => {
        tab.addEventListener('click', () => setActive(i, { scroll: true, focusTab: false }));
        tab.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowRight') {
            setActive(i + 1, { scroll: true, focusTab: true });
            e.preventDefault();
          }
          if (e.key === 'ArrowLeft') {
            setActive(i - 1, { scroll: true, focusTab: true });
            e.preventDefault();
          }
          if (e.key === 'Home') {
            setActive(0, { scroll: true, focusTab: true });
            e.preventDefault();
          }
          if (e.key === 'End') {
            setActive($tabs.length - 1, { scroll: true, focusTab: true });
            e.preventDefault();
          }
        });
      });

      $prev?.addEventListener('click', () => setActive(current - 1, { scroll: true, focusTab: true }));
      $next?.addEventListener('click', () => setActive(current + 1, { scroll: true, focusTab: true }));

      // Initialize
      setActive(0, { scroll: false, focusTab: false });
      updateNav();

      // Keep selection if blocks are edited live in the editor
      document.addEventListener('shopify:section:load', updateNav);
      document.addEventListener('shopify:block:select', (e) => {
        const idx = Number(e.target?.dataset?.index);
        if (!Number.isNaN(idx)) setActive(idx, { scroll: true, focusTab: true });
      });
    })();
  </script>
</section>

{% schema %}
{
  "name": "Timeline slider",
  "tag": "section",
  "class": "timeline-slider",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "The power to transform in weeks" },
    {
      "type": "range",
      "id": "gap",
      "label": "Marker gap",
      "min": 60,
      "max": 240,
      "step": 4,
      "unit": "px",
      "default": 120
    },
    { "type": "checkbox", "id": "show_nav", "label": "Show arrow navigation", "default": true }
  ],
  "blocks": [
    {
      "type": "step",
      "name": "Step",
      "settings": [
        { "type": "text", "id": "label", "label": "Label (e.g. Week 1)", "default": "Week 1" },
        { "type": "text", "id": "title", "label": "Title", "default": "The journey begins" },
        {
          "type": "textarea",
          "id": "text",
          "label": "Description",
          "default": "Bioavailable, patented ingredients enter your bloodstream and start to deliver measurable results."
        },
        { "type": "image_picker", "id": "image", "label": "Image" }
      ]
    }
  ],
  "presets": [
    {
      "name": "Timeline slider",
      "category": "Custom",
      "blocks": [
        { "type": "step", "settings": { "label": "Week 1", "title": "The journey begins" } },
        { "type": "step", "settings": { "label": "Week 2", "title": "Momentum builds" } },
        { "type": "step", "settings": { "label": "Week 3", "title": "Noticeable changes" } },
        { "type": "step", "settings": { "label": "Week 4", "title": "Compounding benefits" } },
        { "type": "step", "settings": { "label": "Beyond", "title": "Long-term transformation" } }
      ]
    }
  ]
}
{% endschema %}
