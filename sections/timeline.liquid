{% schema %}
{
  "name": "Draggable Timeline",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Our Timeline"
    }
  ],
  "blocks": [
    {
      "type": "step",
      "name": "Step",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Step Title",
          "default": "Step Title"
        },
        {
          "type": "text",
          "id": "content",
          "label": "Step Content",
          "default": "Step description goes here."
        }
      ]
    }
  ],
  "max_blocks": 8,
  "presets": [
    {
      "name": "Draggable Timeline",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<section class="timeline-section" id="timeline-{{ section.id }}">
  <div class="page-width">
    {% if section.settings.heading != blank %}
      <h2 class="ts-heading">{{ section.settings.heading }}</h2>
    {% endif %}

    <!-- Rail + Handle -->
    <div class="ts-rail-wrap">
      <div class="ts-rail"></div>
      <div class="ts-handle"></div>
      <div class="ts-steps">
        {% for block in section.blocks %}
          <div class="ts-step {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}"></div>
        {% endfor %}
      </div>
    </div>

    <!-- Contents -->
    <div class="ts-scroller">
      {% for block in section.blocks %}
        <div class="ts-item {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}">
          <h4>{{ block.settings.title }}</h4>
          <p>{{ block.settings.content }}</p>
        </div>
      {% endfor %}
    </div>
  </div>
</section>

<style>
  #timeline-{{ section.id }} {
    position: relative;
    padding: 60px 20px;
  }

  #timeline-{{ section.id }} .ts-heading {
    text-align: center;
    margin-bottom: 40px;
  }

  /* Rail */
  #timeline-{{ section.id }} .ts-rail-wrap {
    position: relative;
    height: 60px;
    margin-bottom: 40px;
  }

  #timeline-{{ section.id }} .ts-rail {
    position: absolute;
    top: 29px;
    left: 0;
    right: 0;
    height: 2px;
    background: #ddd;
  }

  /* Steps */
  #timeline-{{ section.id }} .ts-steps {
    position: absolute;
    top: 20px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
  }

  #timeline-{{ section.id }} .ts-step {
    width: 20px;
    height: 20px;
    background: #bbb;
    border-radius: 50%;
    cursor: pointer;
    transition: background .3s;
  }
  #timeline-{{ section.id }} .ts-step.active {
    background: #000;
  }

  /* Draggable Handle */
  #timeline-{{ section.id }} .ts-handle {
    position: absolute;
    top: 20px;
    left: 0;
    width: 24px;
    height: 24px;
    background: #000;
    border-radius: 50%;
    cursor: grab;
    transform: translateX(-50%);
    z-index: 2;
    transition: left .3s;
  }

  /* Items */
  #timeline-{{ section.id }} .ts-scroller {
    display: flex;
    justify-content: center;
    gap: 30px;
    flex-wrap: wrap;
  }

  #timeline-{{ section.id }} .ts-item {
    width: 200px;
    padding: 20px;
    background: #f5f5f5;
    border-radius: 8px;
    text-align: center;
    transition: transform .3s, background .3s;
  }
  #timeline-{{ section.id }} .ts-item.active {
    background: #000;
    color: #fff;
    transform: scale(1.05);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const section = document.querySelector('#timeline-{{ section.id }}');
    const rail = section.querySelector('.ts-rail');
    const handle = section.querySelector('.ts-handle');
    const steps = section.querySelectorAll('.ts-step');
    const items = section.querySelectorAll('.ts-item');

    let isDragging = false;
    let railRect, railWidth;

    function setActive(index) {
      steps.forEach((s, i) => s.classList.toggle('active', i === index));
      items.forEach((it, i) => it.classList.toggle('active', i === index));
      let step = steps[index];
      handle.style.left = step.offsetLeft + 'px';
    }

    function setHandlePosition(x) {
      x = Math.max(0, Math.min(x, railWidth));
      handle.style.left = x + 'px';
      let step = railWidth / (steps.length - 1);
      let index = Math.round(x / step);
      setActive(index);
    }

    handle.addEventListener('mousedown', (e) => {
      isDragging = true;
      railRect = rail.getBoundingClientRect();
      railWidth = railRect.width;
    });

    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      let x = e.clientX - railRect.left;
      setHandlePosition(x);
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
    });

    // Touch support
    handle.addEventListener('touchstart', (e) => {
      isDragging = true;
      railRect = rail.getBoundingClientRect();
      railWidth = railRect.width;
    });

    document.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      let x = e.touches[0].clientX - railRect.left;
      setHandlePosition(x);
    });

    document.addEventListener('touchend', () => {
      isDragging = false;
    });

    // Click support (old logic)
    steps.forEach((step, index) => {
      step.addEventListener('click', () => {
        setActive(index);
      });
    });

    // Init
    setActive(0);
  });
</script>
